/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef chordDHT_H
#define chordDHT_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "chord_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class chordDHTIf {
 public:
  virtual ~chordDHTIf() {}
  virtual void notify(const NODE& node, const NODE& pred) = 0;
  virtual void get_pred(NODE& _return, const NODE& node) = 0;
  virtual void find_successor(NODE& _return, const int64_t id) = 0;
};

class chordDHTIfFactory {
 public:
  typedef chordDHTIf Handler;

  virtual ~chordDHTIfFactory() {}

  virtual chordDHTIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(chordDHTIf* /* handler */) = 0;
};

class chordDHTIfSingletonFactory : virtual public chordDHTIfFactory {
 public:
  chordDHTIfSingletonFactory(const ::std::shared_ptr<chordDHTIf>& iface) : iface_(iface) {}
  virtual ~chordDHTIfSingletonFactory() {}

  virtual chordDHTIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(chordDHTIf* /* handler */) {}

 protected:
  ::std::shared_ptr<chordDHTIf> iface_;
};

class chordDHTNull : virtual public chordDHTIf {
 public:
  virtual ~chordDHTNull() {}
  void notify(const NODE& /* node */, const NODE& /* pred */) {
    return;
  }
  void get_pred(NODE& /* _return */, const NODE& /* node */) {
    return;
  }
  void find_successor(NODE& /* _return */, const int64_t /* id */) {
    return;
  }
};

typedef struct _chordDHT_notify_args__isset {
  _chordDHT_notify_args__isset() : node(false), pred(false) {}
  bool node :1;
  bool pred :1;
} _chordDHT_notify_args__isset;

class chordDHT_notify_args {
 public:

  chordDHT_notify_args(const chordDHT_notify_args&);
  chordDHT_notify_args& operator=(const chordDHT_notify_args&);
  chordDHT_notify_args() {
  }

  virtual ~chordDHT_notify_args() noexcept;
  NODE node;
  NODE pred;

  _chordDHT_notify_args__isset __isset;

  void __set_node(const NODE& val);

  void __set_pred(const NODE& val);

  bool operator == (const chordDHT_notify_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (!(pred == rhs.pred))
      return false;
    return true;
  }
  bool operator != (const chordDHT_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chordDHT_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chordDHT_notify_pargs {
 public:


  virtual ~chordDHT_notify_pargs() noexcept;
  const NODE* node;
  const NODE* pred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chordDHT_notify_result {
 public:

  chordDHT_notify_result(const chordDHT_notify_result&);
  chordDHT_notify_result& operator=(const chordDHT_notify_result&);
  chordDHT_notify_result() {
  }

  virtual ~chordDHT_notify_result() noexcept;

  bool operator == (const chordDHT_notify_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const chordDHT_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chordDHT_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chordDHT_notify_presult {
 public:


  virtual ~chordDHT_notify_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _chordDHT_get_pred_args__isset {
  _chordDHT_get_pred_args__isset() : node(false) {}
  bool node :1;
} _chordDHT_get_pred_args__isset;

class chordDHT_get_pred_args {
 public:

  chordDHT_get_pred_args(const chordDHT_get_pred_args&);
  chordDHT_get_pred_args& operator=(const chordDHT_get_pred_args&);
  chordDHT_get_pred_args() {
  }

  virtual ~chordDHT_get_pred_args() noexcept;
  NODE node;

  _chordDHT_get_pred_args__isset __isset;

  void __set_node(const NODE& val);

  bool operator == (const chordDHT_get_pred_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    return true;
  }
  bool operator != (const chordDHT_get_pred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chordDHT_get_pred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chordDHT_get_pred_pargs {
 public:


  virtual ~chordDHT_get_pred_pargs() noexcept;
  const NODE* node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chordDHT_get_pred_result__isset {
  _chordDHT_get_pred_result__isset() : success(false) {}
  bool success :1;
} _chordDHT_get_pred_result__isset;

class chordDHT_get_pred_result {
 public:

  chordDHT_get_pred_result(const chordDHT_get_pred_result&);
  chordDHT_get_pred_result& operator=(const chordDHT_get_pred_result&);
  chordDHT_get_pred_result() {
  }

  virtual ~chordDHT_get_pred_result() noexcept;
  NODE success;

  _chordDHT_get_pred_result__isset __isset;

  void __set_success(const NODE& val);

  bool operator == (const chordDHT_get_pred_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const chordDHT_get_pred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chordDHT_get_pred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chordDHT_get_pred_presult__isset {
  _chordDHT_get_pred_presult__isset() : success(false) {}
  bool success :1;
} _chordDHT_get_pred_presult__isset;

class chordDHT_get_pred_presult {
 public:


  virtual ~chordDHT_get_pred_presult() noexcept;
  NODE* success;

  _chordDHT_get_pred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _chordDHT_find_successor_args__isset {
  _chordDHT_find_successor_args__isset() : id(false) {}
  bool id :1;
} _chordDHT_find_successor_args__isset;

class chordDHT_find_successor_args {
 public:

  chordDHT_find_successor_args(const chordDHT_find_successor_args&);
  chordDHT_find_successor_args& operator=(const chordDHT_find_successor_args&);
  chordDHT_find_successor_args() : id(0) {
  }

  virtual ~chordDHT_find_successor_args() noexcept;
  int64_t id;

  _chordDHT_find_successor_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const chordDHT_find_successor_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const chordDHT_find_successor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chordDHT_find_successor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chordDHT_find_successor_pargs {
 public:


  virtual ~chordDHT_find_successor_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chordDHT_find_successor_result__isset {
  _chordDHT_find_successor_result__isset() : success(false) {}
  bool success :1;
} _chordDHT_find_successor_result__isset;

class chordDHT_find_successor_result {
 public:

  chordDHT_find_successor_result(const chordDHT_find_successor_result&);
  chordDHT_find_successor_result& operator=(const chordDHT_find_successor_result&);
  chordDHT_find_successor_result() {
  }

  virtual ~chordDHT_find_successor_result() noexcept;
  NODE success;

  _chordDHT_find_successor_result__isset __isset;

  void __set_success(const NODE& val);

  bool operator == (const chordDHT_find_successor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const chordDHT_find_successor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chordDHT_find_successor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chordDHT_find_successor_presult__isset {
  _chordDHT_find_successor_presult__isset() : success(false) {}
  bool success :1;
} _chordDHT_find_successor_presult__isset;

class chordDHT_find_successor_presult {
 public:


  virtual ~chordDHT_find_successor_presult() noexcept;
  NODE* success;

  _chordDHT_find_successor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class chordDHTClient : virtual public chordDHTIf {
 public:
  chordDHTClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  chordDHTClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void notify(const NODE& node, const NODE& pred);
  void send_notify(const NODE& node, const NODE& pred);
  void recv_notify();
  void get_pred(NODE& _return, const NODE& node);
  void send_get_pred(const NODE& node);
  void recv_get_pred(NODE& _return);
  void find_successor(NODE& _return, const int64_t id);
  void send_find_successor(const int64_t id);
  void recv_find_successor(NODE& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class chordDHTProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<chordDHTIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (chordDHTProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_pred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_find_successor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  chordDHTProcessor(::std::shared_ptr<chordDHTIf> iface) :
    iface_(iface) {
    processMap_["notify"] = &chordDHTProcessor::process_notify;
    processMap_["get_pred"] = &chordDHTProcessor::process_get_pred;
    processMap_["find_successor"] = &chordDHTProcessor::process_find_successor;
  }

  virtual ~chordDHTProcessor() {}
};

class chordDHTProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  chordDHTProcessorFactory(const ::std::shared_ptr< chordDHTIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< chordDHTIfFactory > handlerFactory_;
};

class chordDHTMultiface : virtual public chordDHTIf {
 public:
  chordDHTMultiface(std::vector<std::shared_ptr<chordDHTIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~chordDHTMultiface() {}
 protected:
  std::vector<std::shared_ptr<chordDHTIf> > ifaces_;
  chordDHTMultiface() {}
  void add(::std::shared_ptr<chordDHTIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void notify(const NODE& node, const NODE& pred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notify(node, pred);
    }
    ifaces_[i]->notify(node, pred);
  }

  void get_pred(NODE& _return, const NODE& node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_pred(_return, node);
    }
    ifaces_[i]->get_pred(_return, node);
    return;
  }

  void find_successor(NODE& _return, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->find_successor(_return, id);
    }
    ifaces_[i]->find_successor(_return, id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class chordDHTConcurrentClient : virtual public chordDHTIf {
 public:
  chordDHTConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  chordDHTConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void notify(const NODE& node, const NODE& pred);
  int32_t send_notify(const NODE& node, const NODE& pred);
  void recv_notify(const int32_t seqid);
  void get_pred(NODE& _return, const NODE& node);
  int32_t send_get_pred(const NODE& node);
  void recv_get_pred(NODE& _return, const int32_t seqid);
  void find_successor(NODE& _return, const int64_t id);
  int32_t send_find_successor(const int64_t id);
  void recv_find_successor(NODE& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
